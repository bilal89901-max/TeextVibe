import { GoogleGenAI, Type } from "@google/genai";
import { type GenerationParams, type GeneratedContent } from '../types';

if (!process.env.API_KEY) {
  // This will be caught by the API call and shown in the UI, which is better than crashing the app.
  console.error("API_KEY environment variable not set. The app will load, but content generation will fail.");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const responseSchema = {
  type: Type.OBJECT,
  properties: {
    script: {
      type: Type.STRING,
      description: "The full video script, structured with an emotional hook, engaging core content, and a clear call-to-action.",
    },
    caption: {
      type: Type.STRING,
      description: "A short, catchy, and viral-style social media caption.",
    },
    hashtags: {
      type: Type.ARRAY,
      description: "An array of exactly 5 viral hashtags, each starting with a '#' character.",
      items: {
        type: Type.STRING,
      },
    },
  },
  required: ['script', 'caption', 'hashtags'],
};


const buildPrompt = (params: GenerationParams): string => {
  const { topic, videoStyle, platform, videoDuration } = params;

  const aiVideoInstructions = `
    - The script should be voiceover-friendly, descriptive, and dynamic, assuming the visuals will be generated by AI.
  `;
  const humanVideoInstructions = `
    - The script should be more natural, conversational, expressive, and easy for a human to act out or record.
  `;

  const styleInstructions = videoStyle === 'AI Video' ? aiVideoInstructions : humanVideoInstructions;

  return `
    Your task is to generate a complete and viral video content package based on the user's selections.

    **User Selections:**
    - **Topic:** "${topic}"
    - **Platform:** ${platform}
    - **Video Type:** For ${videoStyle}
    - **Target Video Duration:** ${videoDuration} seconds

    **Your Instructions:**
    1.  Generate a **viral and engaging video script** for the topic. The script's length and pacing MUST be optimized to fit within the **${videoDuration}-second** target duration. This script must be meticulously optimized for the selected **${platform}** platformâ€™s audience, trends, and tone.
    2.  Generate a compelling **caption** that is perfectly suitable for **${platform}**.
    3.  Generate a set of relevant, high-performing **hashtags** for **${platform}** to maximize reach and discoverability.

    **Style Guidelines (For ${videoStyle}):**
    ${styleInstructions}

    **CRITICAL Output Requirements:**
    - The output MUST be a single, clean JSON object that strictly matches the provided schema.
    - Do NOT mention the selected platform, video type, or duration in the actual generated content (script, caption, hashtags).
    - Absolutely no introductory phrases, comments, or explanations. For example, do not start with "Here is your content:". The response must begin with '{' and end with '}'.
  `;
};

export const generateViralTopic = async (): Promise<string> => {
  const prompt = `
    Act as a viral content researcher and AI video strategist.
    Your task is to generate 1 random, trending video topic that is highly engaging and suitable for short-form video platforms like YouTube Shorts, TikTok, or Instagram Reels.
    The topic should be concise and intriguing.
    Return ONLY the topic text, without any labels, quotation marks, or additional commentary.
  `;

  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: prompt,
    config: {
      temperature: 1.0,
    },
  });

  return response.text.trim().replace(/^"|"$/g, ''); // Trim and remove potential quotes
};


export const generateVideoStrategy = async (params: GenerationParams): Promise<GeneratedContent> => {
  const prompt = buildPrompt(params);

  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: prompt,
    config: {
      responseMimeType: 'application/json',
      responseSchema: responseSchema,
      temperature: 0.8,
    },
  });

  try {
    const text = response.text.trim();
    const parsedJson = JSON.parse(text);

    // Basic validation
    if (!parsedJson.script || !parsedJson.caption || !Array.isArray(parsedJson.hashtags)) {
        throw new Error("Invalid JSON structure received from API.");
    }

    return parsedJson as GeneratedContent;
  } catch (error) {
    console.error("Failed to parse JSON response:", response.text, error);
    throw new Error("The AI returned an invalid response. Please try again.");
  }
};